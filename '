#ifndef WORLD_CENTRIC_CONTROLLER_H
#define WORLD_CENTRIC_CONTROLLER_H
#include "geometry_msgs/msg/transform_stamped.hpp"
#include "josjisbot_controller/robot_controller.hpp"
#include <rclcpp/node.hpp>
// #include <tf2

class WorldCentricController:
	public rclcpp::Node,
	public RobotController
{
public:
	WorldCentricController(const std::string& name);

private:
	rclcpp::Publisher<Float32MultiArray>::SharedPtr wheel_cmd_pub_;
	rclcpp::Subscription<TwistStamped>::SharedPtr cmd_sub_;
	// std::unique_ptr<tf2_ros::TransformBroadcaster> transform_broadcaster_;
	TransformStamped transform_stamped_;

	const std::array<float, 4> wheel_angles_ = {45.0, 135.0, 225.0, 315.0}; // alpha 1-4
	Float32MultiArray wheel_cmd_;
	TransformStamped tf_;
	rclcpp::Time prev_time_;

	void cmdCallback(const TwistStamped& msg);
	Float32MultiArray inverseKinematics(const TwistStamped& cmd) override;
	TwistStamped forwardKinematics(const Float32MultiArray& wheel_cmd) override;
};

#endif // !WORLD_CENTRIC_CONTROLLER_H
